import { copyFileSync, existsSync, readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import { ServiceContext } from '.';
import editDotenv from '../editDotenv';
import { parse } from 'dotenv';

/**
 * Class for managing service environments.
 * @class Environment
 */
export default class Environment {
    /**
     * Constructor for Environment.
     * @param {ServiceContext} serviceContext Service context instance.
     */
    constructor(private serviceContext: ServiceContext) {}

    /**
     * Getter for the selected environment file path.
     * @function path
     * @memberof Environment
     * @returns {string} Path to the environment specific .env file.
     */
    get path(): string {
        return join(
            this.serviceContext.serviceDirectory,
            `${this.serviceContext.selectedEnvironmentName}.env`,
        );
    }

    /**
     * Creates a new environment .env file.
     * @function create
     * @memberof Environment
     * @private
     * @returns {void}
     */
    private create(): void {
        if (existsSync(this.path)) return;
        return this.write(`# This file was generated by the Nix2 CLI`);
    }

    /**
     * Writes content to the environment .env file.
     * @function write
     * @memberof Environment
     * @private
     * @param {string} content Content to write to the environment file.
     * @returns {void}
     */
    private write = (content: string): void => {
        writeFileSync(this.path, content);
        this.createDotEnv();
    };

    /**
     * Reads the environment .env file.
     * @function read
     * @memberof Environment
     * @private
     * @returns {string} Content of the .env file.
     */
    private read = (): string => {
        this.create();
        return readFileSync(this.path, 'utf8');
    };

    /**
     * Sets an environment variable.
     * @function set
     * @memberof Environment
     * @param {string} name  Name of the environment variable.
     * @param {string} value Value of the environment variable.
     * @returns {void}
     */
    set(name: string, value: string): void {
        this.create();
        return this.write(editDotenv(this.read(), { [name]: value }));
    }

    /**
     * Gets an environment variable value.
     * @function get
     * @memberof Environment
     * @param {string} name Name of the environment variable.
     * @returns {string | null} Value of the env var or null if it doesn't exist.
     */
    get(name: string): string | null {
        return parse(this.read())[name] || null;
    }

    /**
     * Create the `.env` file from the selected environment file.
     * @function createDotEnv
     * @memberof Environment
     * @returns {void}
     */
    createDotEnv = (): void => {
        const dotenvPath = join(this.serviceContext.serviceDirectory, '.env');
        this.create();
        copyFileSync(this.path, dotenvPath);
    };
}
