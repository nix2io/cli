import { copyFileSync, existsSync, readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import { ServiceContext } from '.';
import editDotenv from '../editDotenv';
import { parse } from 'dotenv';

export default class Environment {
    constructor(private serviceContext: ServiceContext) {}

    get path(): string {
        return join(
            this.serviceContext.serviceDirectory,
            `${this.serviceContext.selectedEnvironmentName}.env`,
        );
    }

    private create() {
        if (existsSync(this.path)) return null;
        return this.write(`# This file was generated by the Nix2 CLI`);
    }

    private write = (content: string) => {
        writeFileSync(this.path, content);
        this.makeDotEnv();
    };

    private read = () => {
        this.create();
        return readFileSync(this.path, 'utf8');
    };

    set(name: string, value: string) {
        this.create();
        return this.write(editDotenv(this.read(), { [name]: value }));
    }

    get(name: string) {
        return parse(this.read())[name] || null;
    }

    makeDotEnv = () => {
        const dotenvPath = join(this.serviceContext.serviceDirectory, '.env');
        this.create();
        copyFileSync(this.path, dotenvPath);
    };
}
